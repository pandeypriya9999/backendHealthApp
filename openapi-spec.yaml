openapi: 3.0.1
info:
  title: Chronic diesease Management Portal 
  description: API for managing patients in the system
  version: 1.0.0
paths:
  /patients:
    get:
      summary: Retrieve list of patients 
      description: Fetches all patients in the system for the provider 
      tags:
        - Patients
      responses:
        '200':
          description: A list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        '500':
          description: Server error
    post:
      summary: Create a new user
      description: Adds a new user to the system
      tags:
        - Users
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
  /users:
    get:
      summary: Retrieve list of users
      description: Fetches all users in the system
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
    post:
      summary: Create a new user
      description: Adds a new user to the system
      tags:
        - Users
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
  /users/{id}:
    get:
      summary: Retrieve a specific user
      description: Get user details by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user
      description: Update details of an existing user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
    delete:
      summary: Delete a user
      description: Remove a user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
components:
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: string
          example: "1"
        provider:
          type: string
          example: ""
        isConsent:
          type: boolean
          example: true
    Provider:
      type: object
      properties:
        id:
          type: string
          example: "1"
        patients:
          type: array
          example: ""
        
    User:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        password:
          type: string
          example: "P@ssw0rd!"
        role:
          type: string
          enum:
            - patient
            - provider
          example: "patient"


   
